
// C program to print all permutations with duplicates allowed
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>

#define knoten 4

void readDB(int zahlenarray[][knoten]){
	FILE *fp;
	char temp;
	int i = 0;
	int j=0;
	int zahl[100]={};
	int zeile=0;
	fp = fopen("knoten.txt", "r");
	char array[20][knoten];
	int k=0;
	//int zahlenarray[knoten][knoten];
	if(fp==NULL) {
		printf("Konnte Datei nicht öffnen!\n");
	}
	//Lese alle Zahlen in ein char array
	while((temp=fgetc(fp))!=EOF){
		if(temp==10|| temp==32){
			zeile++;
			i=0;
		}else{
			array[zeile][i]=temp;
			i++;
		}
	}

	//string to int
	for(i=0;i<zeile;i++){
		zahl[i]=atoi(array[i]);
	}

	//ints in 4x4 matrix einfuegen
	for(i=0;i<knoten;i++){
		for(j=0;j<knoten;j++){
			zahlenarray[i][j]=zahl[k];
			printf("%i ",zahlenarray[i][j]);
			k++;
		}
		printf("\n");
	}


}

/* Function to swap values at two pointers */
void swap(char *x, char *y)
{
	char temp;
	temp = *x;
	*x = *y;
	*y = temp;
}

/* Function to print permutations of string
   This function takes three parameters:
   1. String
   2. Starting index of the string
   3. Ending index of the string. */

void permute(char *a, int l, int r,char feld[][5])
{
	int i,j;
	int k;
	static int x=0;
	if (l == r){
		//kopiere die varianten in das feld
		for(j=0;j<strlen(a);j++){
			feld[x][j]=       *(a+j);
		}
		x++;
	}else{
		for (i = l; i <= r; i++)
		{
			swap((a+l), (a+i));
			permute(a, l+1, r,feld);
			swap((a+l), (a+i)); //backtrack
		}
	}
}


/* Driver program to test above functions */


void ausgabe(char feld[][5]){
	int i;
	for(i=0;i<32;i++){
		printf("%s\n",feld[i]);

	}

	/*
	int i,j;
	for(i=0;i<20;i++){
	for(j=0;j<strlen(feld[i]);j++){
		printf("%c-",feld[i][j]);
	}}
	 */
}








void varianten1(int node,char feld[][5]){
	char* ursp=NULL;
	int i;
	int bin=1;



	//knotenpunkte 1-4
	ursp=(char*)malloc(node*sizeof(char));

	for(i=1;i<=node;i++){
		*(ursp+i-1)=i+48;
		//	printf("%c\n",*(ursp+i));
	}

	//anzahl an möglichkeiten die node zu kombinieren (binomialkoeffizient)
	for(i=1;i<node+1;i++){
		bin=bin*i;
	}


	//dymanisch gehts nicht, warum auch immer.
	/*
	//platz für die möglichkeiten
	char ** feld=NULL;
	//reserviere zeilen Zeilenanzahl=binomialkoeffizient
	feld=(char**)malloc(sizeof(char*)*bin);
	//reserviere spalten spaltenanzahl=node +1 für string ende (<=)
	for(i=0;i<=node;i++){
		feld[i]=(char*)malloc(sizeof(char)*node);
		feld[i][node]=0;
	}
	 */

	//printf("%s\n",ursp);

	/*1234

	234
	134
	124
	123

	char temp1[5]={'0'};
char temp2[5];
	strcpy(&temp2,ursp);
	int j;

for(j=0;j<4;j++){
	for(i=j;i<strlen(temp2);i++){
temp1[i]=ursp[i+1];

}

	printf("%s\n",temp1);
}
	 */


	permute(ursp,0,node-1,feld);



	//return feld;
}


void distance(char feld[][5],int entfernungen[32], int zahlenarray[][knoten]){
	int z=0,s=0;
	int fahrt=0;
	int pos=2;
	int dist=0;
	int i;
	char strecke[8]={'0'};
	char verbindung='-';
	int j=0;
	int feldgroesse=strlen(feld[fahrt]);
	float zeit=0;
	float temp1=0;
	float temp2=0;
	//fahrt
	printf("feldgroeße=%i\n",feldgroesse);




	//verbindung
	for(i=0;i<=6;i=i+2){
		strecke[i]=feld[fahrt][j];
		if(i<feldgroesse+2){
			strecke[i+1]=verbindung;
		}
		j++;
	}





	//distanz
	for(pos=0;pos<feldgroesse-1;pos++){
		s=feld[fahrt][pos]-48;
		z=feld[fahrt][pos+1]-48;
		s=abs(1-s);
		z=abs(4-z);
		temp1=(float)zahlenarray[z][s];
		dist=dist+zahlenarray[z][s];
		//fahrtzeit
		s=feld[fahrt][pos]-48;
		z=feld[fahrt][pos+1]-48;
		s=abs(4-s);
		z=abs(1-z);
		temp2=(float)zahlenarray[s][z];
		zeit=zeit+temp1*60/temp2;
	}
zeit=zeit+(feldgroesse-2)*10;


//ausgabe
//das .0 bewirkt dass gerundet wird
	printf("\n%s\t\t",strecke);
	printf("%i\t",dist);
	printf("\t%.0f",zeit);









}

int main()
{
	char feld[32][5]={'0'};
	int zahlenarray[knoten][knoten];
	int entfernungen[32];

	int i;
	int node=knoten;

	for(i=0;i<knoten-1;i++){
		node=knoten-i;
		varianten1(node,feld);
	}

	ausgabe(feld);
	readDB(zahlenarray);

	distance(feld,entfernungen,zahlenarray);





	return 0;
}
